package ボウリング

class スコアシート(val スコア文字列: String) {
    val フレーム達: List<フレーム> = スコア文字列.フレーム部分の文字列を取り出す().フレーム達に変換する()
    val ボーナスボール: ボーナスボール = {
        val ボーナスボール文字列 = スコア文字列.ボーナスボール部分の文字列を取り出す()
        when(ボーナスボール文字列.length) {
            0 -> ボーナスなし
            1 -> 一回ボーナス(ボーナスボール文字列[0].点数に変換する())
            2 -> 二回ボーナス(ボーナスボール文字列[0].点数に変換する(), ボーナスボール文字列[1].点数に変換する())
            else -> ボーナスなし
        }
    }()

    fun トータルスコアを求める() : Int {
        val 途中経過 = when(ボーナスボール) {
            is ボーナスなし -> 計算結果(0, 0, 0)
            is 一回ボーナス -> 計算結果(0, ボーナスボール.一投目, 0)
            is 二回ボーナス -> 計算結果(0, ボーナスボール.一投目, ボーナスボール.二投目)
        }

        val 最終結果 = フレーム達.foldRight(途中経過) { フレーム, 途中経過 ->
            when(フレーム) {
                is 通常 -> {
                    val 合計 = 途中経過.合計 + フレーム.一投目 + フレーム.二投目
                    val 次の投球結果 = フレーム.一投目
                    val 次の次の投球結果 = フレーム.二投目
                    計算結果(合計, 次の投球結果, 次の次の投球結果)
                }
                is スペア -> {
                    val 合計 = 途中経過.合計 + フレーム.一投目 + フレーム.二投目 + 途中経過.次の投球結果
                    val 次の投球結果 = フレーム.一投目
                    val 次の次の投球結果 = フレーム.二投目
                    計算結果(合計, 次の投球結果, 次の次の投球結果)
                }
                is ストライク -> {
                    val 合計 = 途中経過.合計 + フレーム.一投目 + 途中経過.次の投球結果 + 途中経過.次の次の投球結果
                    val 次の投球結果 = フレーム.一投目
                    val 次の次の投球結果 = 途中経過.次の投球結果
                    計算結果(合計, 次の投球結果, 次の次の投球結果)
                }
            }
        }

        return 最終結果.合計
    }

    fun String.ボーナスボール部分の文字列を取り出す(): String = this.split("||").getOrNull(1) ?: ""
    fun String.フレーム部分の文字列を取り出す(): フレーム文字列 = this.split("||").getOrNull(0)?.let { フレーム文字列(it) } ?: フレーム文字列("")

    data class フレーム文字列(val 文字列: String) {
        fun フレーム達に変換する(): List<フレーム> {
            return 文字列.フレーム毎に分割する().map {
                when {
                    it == "X" -> ストライク
                    it.length >= 2 && it[1] == '/' -> スペア(it[0].点数に変換する())
                    else -> 通常(it[0].点数に変換する(), it[1].点数に変換する())
                }
            }
        }

        fun String.フレーム毎に分割する(): List<String> = 文字列.split("|")

    }

    data class 計算結果(val 合計: Int, val 次の投球結果: Int, val 次の次の投球結果: Int)
}

fun Char.点数に変換する(): Int = when(this) {
    'X' -> 10
    '-' -> 0
    else -> this.toString().toInt(10)
}